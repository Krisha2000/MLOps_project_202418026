name: Prudential MLOps CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run basic import tests
        run: |
          python -c "import src.main; print('API script is importable.')"
          python -c "import src.train; print('Training script is importable.')"

  continuous-deployment:
    needs: continuous-integration
    runs-on: ubuntu-latest
    if: success()

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Verify training data exists in repository
      - name: Verify Training Data
        run: |
          echo "Checking for training data..."
          if [ -f "data/train.csv" ]; then
            echo "✓ Training data found"
            ls -lh data/train.csv
          else
            echo "✗ Training data not found in repository"
            echo "Available files in data/:"
            ls -la data/ || echo "data/ directory does not exist"
            exit 1
          fi

      # Prepare feature store data
      - name: Prepare Feature Store Data
        run: |
          mkdir -p feature_repo/data
          python3 << 'EOF'
import pandas as pd
from pathlib import Path

print('Reading training data from data/train.csv...')
try:
    raw_data = pd.read_csv('data/train.csv')
    print(f'✓ Loaded {len(raw_data):,} rows')
    
    if 'event_timestamp' not in raw_data.columns:
        raw_data['event_timestamp'] = pd.to_datetime('2025-10-08')
        print('✓ Added event_timestamp column')
    
    output_path = Path('feature_repo/data/train.parquet')
    raw_data.to_parquet(output_path, index=False)
    print(f'✓ Saved to {output_path}')
    
except FileNotFoundError as e:
    print(f'✗ Error: {e}')
    raise
except Exception as e:
    print(f'✗ Unexpected error: {e}')
    raise
EOF

      - name: Apply Feature Store Definitions
        run: |
          cd feature_repo
          feast apply
        
      - name: Run Model Training
        env:
          FEAST_REDIS_HOST: localhost
        run: |
          mlflow server --host 127.0.0.1 --port 5000 &
          sleep 5
          python src/train.py
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/prudential-api

          echo "Building Docker image: $IMAGE_NAME:$IMAGE_TAG"
          docker build . -t $IMAGE_NAME:$IMAGE_TAG

          echo "Pushing Docker image to Docker Hub..."
          docker push $IMAGE_NAME:$IMAGE_TAG
          echo "Image pushed successfully."