name: Prudential MLOps CI/CD

# This workflow now runs on every push to the main branch.
on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Also allow manual runs

jobs:
  # We now have a single, combined job for the entire pipeline.
  build-train-and-deploy:
    runs-on: ubuntu-latest
    
    # Define the Redis service needed for the feature store steps.
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      # --- CI Steps ---
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Needed for DVC

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgit2-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run basic import tests
        run: |
          python -c "import src.main; print('API script is importable.')"
          python -c "import src.train; print('Training script is importable.')"

      # --- CD Steps ---
      # THE FIX: Re-add the setup-dvc step to configure the Git environment for DVC.
      - name: Set up DVC
        uses: iterative/setup-dvc@v1
      
      - name: Pull DVC data
        run: dvc pull --allow-missing
        
      - name: Prepare Data, Apply, and Materialize Feature Store
        env:
          # Tell Feast to connect to the Redis service container started above.
          FEAST_REDIS_HOST: localhost
        run: |
          echo "Creating Parquet data file..."
          python scripts/load_features.py
          
          echo "Applying feature definitions..."
          feast -c feature_repo apply
          
          echo "Materializing features..."
          feast -c feature_repo materialize-incremental $(date -u +%Y-%m-%dT%H:%M:%S)

      - name: Run Model Training
        run: |
          echo "Starting MLflow server..."
          mlflow server --host 127.0.0.1 --port 5000 &
          sleep 5
          
          echo "Running training script..."
          python src/train.py

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/prudential-api

          echo "Building Docker image: $IMAGE_NAME:$IMAGE_TAG"
          docker build . -t $IMAGE_NAME:$IMAGE_TAG

          echo "Pushing Docker image to Docker Hub..."
          docker push $IMAGE_NAME:$IMAGE_TAG
          echo "Image pushed successfully."

